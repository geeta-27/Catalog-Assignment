import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class PolynomialParser {

    public static void main(String[] args) {
        try {
            // Step 1: Initialize Jackson ObjectMapper
            ObjectMapper objectMapper = new ObjectMapper();

            // Step 2: Read the JSON file
            File jsonFile = new File("src/main/resources/testcase1.json"); // Update the path as necessary
            JsonNode rootNode = objectMapper.readTree(jsonFile);

            // Step 3: Extract 'n' and 'k' from the 'keys' object
            JsonNode keysNode = rootNode.get("keys");
            int n = keysNode.get("n").asInt();
            int k = keysNode.get("k").asInt();

            // Print n and k
            System.out.println("n (number of points): " + n);
            System.out.println("k (minimum points to solve polynomial): " + k);

            // Step 4: Extract and decode points from the JSON
            Map<Integer, Point> points = new HashMap<>();
            for (int i = 1; i <= n; i++) {
                JsonNode pointNode = rootNode.get(String.valueOf(i));
                if (pointNode != null) {
                    String baseStr = pointNode.get("base").asText();
                    String valueStr = pointNode.get("value").asText();

                    int base = Integer.parseInt(baseStr);  // Convert base string to integer
                    int decodedValue = Integer.parseInt(valueStr, base);  // Convert value from given base to decimal

                    points.put(i, new Point(i, decodedValue, base));

                    // Print out the decoded points
                    System.out.println("Point (x = " + i + ", y = " + decodedValue + ", base = " + base + ")");
                }
            }

            // You now have the points (x, y) decoded and ready to use

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper class to represent a point in the polynomial
    public static class Point {
        private final int x;
        private final int y;
        private final int base;

        public Point(int x, int y, int base) {
            this.x = x;
            this.y = y;
            this.base = base;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public int getBase() {
            return base;
        }
    }
}
